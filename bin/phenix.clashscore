#! /bin/sh
# LIBTBX_DISPATCHER DO NOT EDIT
#
# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT EDIT! CHANGES WILL BE LOST.
# To customize this auto-generated script create
#
#   dispatcher_include*.sh
#
# files in "/opt/phenix_1.20/phenix-1.20.1-4487/build" and run
#
#   libtbx.refresh
#
# to re-generate the dispatchers (libtbx.refresh is a subset
# of the functionality of the libtbx/configure.py command).
#
# See also:
#   "/opt/phenix_1.20/phenix-1.20.1-4487/build/dispatcher_include_template.sh"
#

# ----------------------------------------------------------------------------
# The shellrealpath function resolves an absolute physical path of its
# first argument and stores it in a global shell variable RESULT.
# The function returns nonzero for unreadable or invalid symlinks
# and resets the RESULT to an empty string.

shellrealpath() {
    local ORGDIR="$PWD"
    local TARGET="$1"
    RESULT=""
    # This test fails for a symlink loop.  We can do without resolution
    # of symlinks that point to existing unreadable files.
    [ -r "$TARGET" ] || return $?
    # Check if the readlink command exists.
    type readlink >/dev/null || return $?
    while true; do
        cd "$(dirname "$TARGET")"
        TARGET="$(basename "$TARGET")"
        if [ -L "$TARGET" ]; then
            TARGET="$(readlink "$TARGET")"
            continue
        fi
        RESULT="$(pwd -P)/$TARGET"
        break
    done
    cd "$ORGDIR"
}
# ----------------------------------------------------------------------------

unset PYTHONHOME
LC_ALL=en_US.UTF-8
export LC_ALL
LIBTBX_BUILD="$(shellrealpath "$0" && cd "$(dirname "$RESULT")/.." && pwd)"
export LIBTBX_BUILD
LIBTBX_PYEXE_BASENAME="python2.7"
export LIBTBX_PYEXE_BASENAME
LIBTBX_DISPATCHER_NAME="phenix.clashscore"
export LIBTBX_DISPATCHER_NAME
# ---------------------------------------------------------------------------------------------
# included from /opt/phenix_1.20/phenix-1.20.1-4487/build/dispatcher_include_phenix.sh
if [ "$LIBTBX_DISPATCHER_NAME" != "libtbx.scons" ] &&    [ -z "$PHENIX_TRUST_OTHER_ENV" ]; then
  # work around broken library environments
  LD_LIBRARY_PATH=""
  DYLD_LIBRARY_PATH=""
  DYLD_FALLBACK_LIBRARY_PATH=""
  PYTHONPATH=""
fi
# ---------------------------------------------------------------------------------------------
SSL_CERT_FILE="$LIBTBX_BUILD/../conda_base/lib/python2.7/site-packages/certifi/cacert.pem"
export SSL_CERT_FILE
OPENBLAS_NUM_THREADS="1"
export OPENBLAS_NUM_THREADS
unset GTK_MODULES
unset GTK2_RC_FILES
unset GTK_RC_FILES
export FONTCONFIG_PATH=$LIBTBX_BUILD/../conda_base/etc/fonts
export FONTCONFIG_FILE=$FONTCONFIG_PATH/fonts.conf
export GDK_PIXBUF_MODULE_FILE=$LIBTBX_BUILD/../conda_base/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
export GTK_PATH=$LIBTBX_BUILD/../conda_base/lib/gtk-2.0/2.10.0
if [ -n "$PYTHONPATH" ]; then
  PYTHONPATH="$LIBTBX_BUILD/../modules:$LIBTBX_BUILD/../modules/cctbx_project:$LIBTBX_BUILD/../modules/phasertng:$LIBTBX_BUILD/../modules/phenix:$LIBTBX_BUILD/../modules/phenix_pathwalker:$LIBTBX_BUILD/../modules/reel:$LIBTBX_BUILD/../modules/phaser:$LIBTBX_BUILD/../modules/tntbx:$LIBTBX_BUILD/../modules/elbow:$LIBTBX_BUILD/../modules/PyQuante:$LIBTBX_BUILD/../modules/cctbx_project/boost_adaptbx:$LIBTBX_BUILD/lib:$LIBTBX_BUILD/../conda_base/lib/site-python:$LIBTBX_BUILD/../conda_base/lib/python2.7/site-packages:$PYTHONPATH"
  export PYTHONPATH
else
  PYTHONPATH="$LIBTBX_BUILD/../modules:$LIBTBX_BUILD/../modules/cctbx_project:$LIBTBX_BUILD/../modules/phasertng:$LIBTBX_BUILD/../modules/phenix:$LIBTBX_BUILD/../modules/phenix_pathwalker:$LIBTBX_BUILD/../modules/reel:$LIBTBX_BUILD/../modules/phaser:$LIBTBX_BUILD/../modules/tntbx:$LIBTBX_BUILD/../modules/elbow:$LIBTBX_BUILD/../modules/PyQuante:$LIBTBX_BUILD/../modules/cctbx_project/boost_adaptbx:$LIBTBX_BUILD/lib:$LIBTBX_BUILD/../conda_base/lib/site-python:$LIBTBX_BUILD/../conda_base/lib/python2.7/site-packages"
  export PYTHONPATH
fi
if [ -n "$LD_LIBRARY_PATH" ]; then
  LD_LIBRARY_PATH="$LIBTBX_BUILD/lib:$LIBTBX_BUILD/../conda_base/lib:$LD_LIBRARY_PATH"
  export LD_LIBRARY_PATH
else
  LD_LIBRARY_PATH="$LIBTBX_BUILD/lib:$LIBTBX_BUILD/../conda_base/lib"
  export LD_LIBRARY_PATH
fi
if [ -n "$PATH" ]; then
  PATH="$LIBTBX_BUILD/bin:$PATH"
  export PATH
else
  PATH="$LIBTBX_BUILD/bin"
  export PATH
fi
# ---------------------------------------------
# lines marked LIBTBX_PRE_DISPATCHER_INCLUDE_SH
export PHENIX_GUI_ENVIRONMENT=1
# ---------------------------------------------
# ------------------------------------------------------------------------------------
# included from /opt/phenix_1.20/phenix-1.20.1-4487/build/dispatcher_include_phenix.sh
export PHENIX="/opt/phenix_1.20/phenix-1.20.1-4487"
export PHENIX_VERSION=1.20.1-4487
export PHENIX_ENVIRONMENT=1
export PHENIX_MTYPE=intel-linux-2.6-x86_64

if [ "$PHENIX_GUI_ENVIRONMENT" = "1" ]; then
  if [ -z "$DISABLE_PHENIX_GUI" ]; then
    export BOOST_ADAPTBX_FPE_DEFAULT=1
    export BOOST_ADAPTBX_SIGNALS_DEFAULT=1
  fi
fi


if [ ! -z "$QB_PYTHONPATH" ]; then
  export PYTHONPATH=$PYTHONPATH:$QB_PYTHONPATH
fi
if [ ! -z "$QB_LD_LIBRARY_PATH" ]; then
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$QB_LD_LIBRARY_PATH
fi
if [ ! -z "$QB_DYLD_LIBRARY_PATH" ]; then
  export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$QB_DYLD_LIBRARY_PATH
fi

if [ ! -z "$QB_PYTHONPATH" ]; then
  export PYTHONPATH=$PYTHONPATH:$QB_PYTHONPATH
fi
if [ ! -z "$QB_LD_LIBRARY_PATH" ]; then
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$QB_LD_LIBRARY_PATH
fi
if [ ! -z "$QB_DYLD_LIBRARY_PATH" ]; then
  export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$QB_DYLD_LIBRARY_PATH
fi
if [ "$PHENIX_MTYPE" != "mac-ppc-osx" ] && \
   [ "$PHENIX_MTYPE" != "mac-intel-osx" ] && \
   [ "$PHENIX_MTYPE" != "mac-intel-osx-x86_64" ]; then
  export PYMOL_PATH=$PHENIX/pymol
fi
# ------------------------------------------------------------------------------------
# ----------------------------------------------
# lines marked LIBTBX_POST_DISPATCHER_INCLUDE_SH
# ----------------------------------------------
LIBTBX_PYEXE="$LIBTBX_BUILD/../conda_base/bin/$LIBTBX_PYEXE_BASENAME"
export LIBTBX_PYEXE
if [ -n "$LIBTBX__VALGRIND_FLAG__" ]; then
  exec $LIBTBX_VALGRIND "$LIBTBX_PYEXE" -Qnew "$LIBTBX_BUILD/../modules/cctbx_project/mmtbx/command_line/clashscore.py" "$@"
elif [ -n "$LIBTBX__CPROFILE_FLAG__" ]; then
  exec  "$LIBTBX_PYEXE" -Qnew -m cProfile -o phenix.clashscore.profile "$LIBTBX_BUILD/../modules/cctbx_project/mmtbx/command_line/clashscore.py" "$@"
elif [ $# -eq 0 ]; then
  exec "$LIBTBX_PYEXE" -Qnew "$LIBTBX_BUILD/../modules/cctbx_project/mmtbx/command_line/clashscore.py"
else
  exec "$LIBTBX_PYEXE" -Qnew "$LIBTBX_BUILD/../modules/cctbx_project/mmtbx/command_line/clashscore.py" "$@"
fi
